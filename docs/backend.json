{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the VLSI Interview Ace platform.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the User entity."
        },
        "email": {
          "type": "string",
          "description": "User's email address.",
          "format": "email"
        },
        "firstName": {
          "type": "string",
          "description": "User's first name."
        },
        "lastName": {
          "type": "string",
          "description": "User's last name."
        },
        "registrationDate": {
          "type": "string",
          "description": "Date and time the user registered.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "email"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous",
      "google.com"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profile information.  Uses the Firebase Auth UID as the document ID. Path-based ownership ensures only the authenticated user can access their data.",
          "params": [
            {
              "name": "userId",
              "description": "The Firebase Auth UID of the user."
            }
          ]
        }
      }
    ],
    "reasoning": "This Firestore structure is designed to support the VLSI Interview Ace platform. User data is stored in a dedicated collection (`/users/{userId}`) to manage profile information. This approach leverages path-based ownership for user data, ensuring that only the authenticated user can access their own profile. The use of the user's `uid` as the document ID also streamlines security rules, making them straightforward and efficient. The `users` collection stores all the information about the user."
  }
}
